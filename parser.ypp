%{

  #include <iostream>
  #include <string>
  #include <cstdlib>
  #include "ast.hpp"

  using namespace std;

  int yylex();

  void yyerror(string s) {
    cerr << s << endl;
    exit(EXIT_FAILURE);
  }

  int counter = 0;

%}

%union {
  ExprAST *e;
  double d;
  string *s;
  vector<ExprAST*> *v;
  vector<string> *v1;
  PrototypeAST *p;
}

%type <e> E FunctionCall
%type <v> ArrayE
%type <v1> ParameterArray
%type <p> Signature

%token def_token extern_token if_token then_token else_token 
%token for_token in_token
%token <s> id_token
%token <d> num_token

%left ':'
%left then_token
%left else_token in_token
%left '|'
%left '<' '>' '='
%left '+' '-'
%left '*' '/'
%nonassoc '!'

%%
Program: Program Statement ';' {

 }
| Statement ';' {

 }
;

Statement: def_token Signature E {
  FunctionAST *f = new FunctionAST($2, $3);
  f->codegen();
  delete f;
 }
| E {
  vector<string> arguments;
  FunctionAST *f = new FunctionAST(new PrototypeAST(string("anonymous_function_") + to_string(counter++), arguments), $1);
  f->codegen();
  delete f; 
 }
| extern_token Signature {
  $2->codegen();
  delete $2;
 }
;

Signature: id_token '(' ParameterArray ')' {
  $$ = new PrototypeAST(*$1, *$3);
  delete $1;
  delete $3;
 }
;

ParameterArray: ParameterArray id_token {
  $$ = $1;
  $$->push_back(*$2);
  delete $2;
 }
| {
  $$ = new vector<string>();
 }
;

E: E '+' E  {
  $$ = new AddExprAST($1, $3);
 }
| E '-' E   {
  $$ = new SubExprAST($1, $3);
 }
| E '*' E   {
  $$ = new MulExprAST($1, $3);
 }
| E '/' E   {
  $$ = new DivExprAST($1, $3);
 }
| E '<' E {
  $$ = new LtExprAST($1, $3);
}
| E '>' E {
  $$ = new GtExprAST($1, $3);
}
| '!' E {
  $$ = new IfExprAST($2, new NumberExprAST(0.0), new NumberExprAST(1.0));
  }
| E '|' E {
  $$ = new IfExprAST($1, new NumberExprAST(1.0), new IfExprAST($3, new NumberExprAST(1.0), new NumberExprAST(0.0)));
  }
| E '=' E {
  $$ = new IfExprAST(new SubExprAST($1, $3), new NumberExprAST(0.0), new NumberExprAST(1.0));
  }
| E ':' E {
  $$ = new SeqExprAST($1, $3);
  }
| '(' E ')' {
  $$ = $2;
 }
| num_token {
  $$ = new NumberExprAST($1);
 }
| id_token  {
  $$ = new VariableExprAST(*$1);
  delete $1;
 }
| FunctionCall  {
  $$ = $1;
 }
| if_token E then_token E else_token E {
  $$ = new IfExprAST($2, $4, $6);
 }
| if_token E then_token E {
  $$ = new IfExprAST($2, $4, new NumberExprAST(0.0));
 }
| for_token id_token '=' E ',' E ',' E in_token E {
  $$ = new ForExprAST(*$2, $4, $6, $8, $10);
  delete $2;
 }
| for_token id_token '=' E ',' E in_token E {
  $$ = new ForExprAST(*$2, $4, $6, new NumberExprAST(1.0), $8);
  delete $2;
 }

;

FunctionCall: id_token '(' ArrayE ')' {
  $$ = new CallExprAST(*$1, *$3);
  delete $1;
  delete $3;
 }
| id_token '(' ')' {
  vector<ExprAST*> tmp;
  $$ = new CallExprAST(*$1, tmp);
  delete $1;
 }
;

ArrayE: ArrayE ',' E {
  $$ = $1;
  $$->push_back($3);
 }
| E {
  $$ = new vector<ExprAST*>();
  $$->push_back($1);
 }
;



%%

extern LLVMContext TheContext;
extern Module* TheModule;

int main() {

  InitializeModuleAndPassManager();

  yyparse();
  
  TheModule->print(outs(), nullptr);

  delete TheModule;

  return 0;
}

