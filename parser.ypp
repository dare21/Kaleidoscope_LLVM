%{

  #include <iostream>
  #include <string>
  #include <cstdlib>
  #include "ast.hpp"
  #define YYDEBUG 1
  using namespace std;

  int yylex();

  void yyerror(string s) {
    cerr << s << endl;
    exit(EXIT_FAILURE);
  }

  int counter = 0;
  
%}

%union {
  ExprAST *e;
  double d;
  string *s;
  vector<ExprAST*> *v;
  vector<string> *v1;
  PrototypeAST *p;
  vector< pair<string, ExprAST*> > *v2;
  pair<string, ExprAST*> *p1;
}

%type <e> E FunctionCall
%type <v> ArrayE
%type <v1> ParameterArray
%type <p> Signature
%type <v2> DeclarationArray
%type <p1> Declaration

%token def_token extern_token if_token then_token else_token for_token in_token eq_token var_token
%token <s> id_token
%token <d> num_token

%left ':'
%left then_token
%left else_token in_token
%right '='
%left '|'
%left '<' '>' eq_token
%left '+' '-'
%left '*' '/'
%nonassoc '!'

%%
Program: Program Statement ';' {

 }
| Statement ';' {

 }
;

Statement: def_token Signature E {
  FunctionAST *f = new FunctionAST($2, $3);
  f->codegen();
  delete f;
 }
| E {
  vector<string> argumenti;
  FunctionAST *f = new FunctionAST(new PrototypeAST(string("anonymous_function_") + to_string(counter++), argumenti), $1);
  f->codegen();
  delete f;
  }
| extern_token Signature {
  $2->codegen();
  delete $2;
 }
;

Signature: id_token '(' ParameterArray ')' {
  $$ = new PrototypeAST(*$1, *$3);
  delete $1;
  delete $3;
 }
;

ParameterArray: ParameterArray id_token {
  $$ = $1;
  $$->push_back(*$2);
  delete $2;
 }
| {
  $$ = new vector<string>();
 }
;

E: E '+' E  {
  $$ = new AddExprAST($1, $3);
 }
| E '-' E   {
  $$ = new SubExprAST($1, $3);
 }
| E '*' E   {
  $$ = new MulExprAST($1, $3);
 }
| E '/' E   {
  $$ = new DivExprAST($1, $3);
 }
| E '<' E {
  $$ = new LtExprAST($1, $3);
  }
| E '>' E {
  $$ = new GtExprAST($1, $3);
  }
| '!' E {
  $$ = new IfExprAST($2, new NumberExprAST(0.0), new NumberExprAST(1.0));
  }
| E '|' E {
  $$ = new IfExprAST($1, new NumberExprAST(1.0), new IfExprAST($3, new NumberExprAST(1.0), new NumberExprAST(0.0)));
  }
| E eq_token E {
  $$ = new IfExprAST(new SubExprAST($1, $3), new NumberExprAST(0.0), new NumberExprAST(1.0));
  }
| E ':' E {
  $$ = new SeqExprAST($1, $3);
  }
| '(' E ')' {
  $$ = $2;
 }
| num_token {
  $$ = new NumberExprAST($1);
 }
| id_token  {
  $$ = new VariableExprAST(*$1);
  delete $1;
 }
| FunctionCall  {
  $$ = $1;
 }
| if_token E then_token E else_token E {
  $$ = new IfExprAST($2, $4, $6);
 }
| if_token E then_token E {
  $$ = new IfExprAST($2, $4, new NumberExprAST(0.0));
 }
| for_token id_token '=' E ',' E ',' E in_token E {
  $$ = new ForExprAST(*$2, $4, $6, $8, $10);
  delete $2;
 }
| for_token id_token '=' E ',' E in_token E {
  $$ = new ForExprAST(*$2, $4, $6, new NumberExprAST(1.0), $8);
  delete $2;
 }
| id_token '=' E {
  $$ = new AssignExprAST(*$1, $3);
  delete $1;
  }
| var_token DeclarationArray in_token E {
  $$ = new VarExprAST(*$2, $4);
  delete $2;
 }
;

FunctionCall: id_token '(' ArrayE ')' {
  $$ = new CallExprAST(*$1, *$3);
  delete $1;
  delete $3;
 }
| id_token '(' ')' {
  vector<ExprAST*> tmp;
  $$ = new CallExprAST(*$1, tmp);
  delete $1;
 }
;

ArrayE: ArrayE ',' E {
  $$ = $1;
  $$->push_back($3);
 }
| E {
  $$ = new vector<ExprAST*>();
  $$->push_back($1);
 }
;

DeclarationArray: DeclarationArray ',' Declaration {
  $$ = $1;
  $$->push_back(*$3);
  delete $3;
 }
| Declaration {
  $$ = new vector< pair<string, ExprAST*> >();
  $$->push_back(*$1);
  delete $1;
 }
;

Declaration: id_token '=' E {
  $$ = new pair<string, ExprAST*>(*$1, $3);
  delete $1;
 }
| id_token {
  $$ = new pair<string, ExprAST*>(*$1, new NumberExprAST(0));
  delete $1;
 }
;

%%

extern LLVMContext TheContext;
extern Module* TheModule;

int main() {
  //yydebug = 1;
  InitializeModuleAndPassManager();

  yyparse();

  //Generisem kod za main fju
  
  //TheModule->print(outs(), nullptr);

  auto TargetTriple = sys::getDefaultTargetTriple();

  InitializeAllTargetInfos();
  InitializeAllTargets();
  InitializeAllTargetMCs();
  InitializeAllAsmParsers();
  InitializeAllAsmPrinters();

  string Error;
  auto Target = TargetRegistry::lookupTarget(TargetTriple, Error);
  
  if (!Target) {
    cerr << Error << endl;
    return 1;
  }

  auto CPU = "generic";
  auto Features = "";
  
  TargetOptions opt;
  auto RM = Optional<Reloc::Model>();
  auto TargetMachine = Target->createTargetMachine(TargetTriple, CPU, Features, opt, RM);

  TheModule->setDataLayout(TargetMachine->createDataLayout());
  TheModule->setTargetTriple(TargetTriple);

  auto Filename = "output.o";
  std::error_code EC;
  raw_fd_ostream dest(Filename, EC, sys::fs::OF_None);
  
  if (EC) {
    cerr << "Could not open file: " << EC.message() << endl;
    return 1;
  }

  legacy::PassManager pass;
  auto FileType = CGFT_ObjectFile;
  
  if (TargetMachine->addPassesToEmitFile(pass, dest, nullptr, FileType)) {
    cerr << "TargetMachine can't emit a file of this type";
    return 1;
  }
  
  pass.run(*TheModule);
  dest.flush();
  dest.close();
  
  delete TheModule;
  
  return 0;
}

